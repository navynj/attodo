generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  icon          String?
  image         String?
  birthDate     DateTime?
  tel           String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Account       Account[]
  Session       Session[]
  Project       Project[]
  Goal          Goal[]
  Task          Task[]
  Event         Event[]
  Note          Note[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  type   String
  id     String @id @default(cuid())
  title  String
  status String

  icon        String?
  startDate   DateTime?
  dueDate     DateTime?
  description String?
  isImportant Boolean?
  isUrgent    Boolean?
  size        Int?
  weight      Int?

  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Goal      Goal[]
  Task      Task[]
}

model Goal {
  type   String
  id     String @id @default(cuid())
  title  String
  status String

  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?

  dueDate     DateTime?
  description String?
  isPinned    Boolean?
  isImportant Boolean?
  isUrgent    Boolean?
  size        Int?
  weight      Int?

  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Task      Task[]
}

model Task {
  type   String
  id     String @id @default(cuid())
  title  String
  status String

  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?

  goal   Goal?   @relation(fields: [goalId], references: [id])
  goalId String?

  date        DateTime?
  description String?
  isPinned    Boolean?
  isImportant Boolean?
  isUrgent    Boolean?
  size        Int?
  weight      Int?
  showOutside Boolean?

  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  type        String
  id          String   @id @default(cuid())
  title       String
  date        DateTime
  description String?
  isPinned    Boolean?

  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Note {
  type        String
  id          String    @id @default(cuid())
  title       String
  date        DateTime?
  description String?
  isPinned    Boolean?

  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
